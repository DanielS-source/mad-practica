//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Es.Udc.DotNet.PracticaMaD.Model
{
    using System;
    using System.Text;
    using System.Collections.Generic;
    
    public partial class Comments
    {
        public long comId { get; set; }
        public long imgId { get; set; }
        public long usrId { get; set; }
        public string message { get; set; }
        public System.DateTime postDate { get; set; }
    
    	/// <summary>
        /// Relationship Name (Foreign Key in ER-Model): 
    	/// FK_Image_Comm
        /// </summary>
        public virtual Image Image { get; set; }
    	/// <summary>
        /// Relationship Name (Foreign Key in ER-Model): 
    	/// FK_User_Comm
        /// </summary>
        public virtual UserProfile UserProfile { get; set; }
    
    	/// <summary>
    	/// A hash code for this instance, suitable for use in hashing algorithms and data structures 
    	/// like a hash table. It uses the Josh Bloch implementation from "Effective Java"
        /// Primary key of entity is not included in the hash calculation to avoid errors
    	/// with Entity Framework creation of key values.
    	/// </summary>
    	/// <returns>
    	/// Returns a hash code for this instance.
    	/// </returns>
    	public override int GetHashCode()
    	{
    	    unchecked
    	    {
    			int multiplier = 31;
    			int hash = GetType().GetHashCode();
    
    			hash = hash * multiplier + imgId.GetHashCode();
    			hash = hash * multiplier + usrId.GetHashCode();
    			hash = hash * multiplier + (message == null ? 0 : message.GetHashCode());
    			hash = hash * multiplier + postDate.GetHashCode();
    
    			return hash;
    	    }
    
    	}
        
        /// <summary>
        /// Compare this object against another instance using a value approach (field-by-field) 
        /// </summary>
        /// <remarks>See http://www.loganfranken.com/blog/687/overriding-equals-in-c-part-1/ for detailed info </remarks>
    	public override bool Equals(object obj)
    	{
    
            if (ReferenceEquals(null, obj)) return false;        // Is Null?
            if (ReferenceEquals(this, obj)) return true;         // Is same object?
            if (obj.GetType() != this.GetType()) return false;   // Is same type? 
    
            Comments target = obj as Comments;
    
    		return true
               &&  (this.comId == target.comId )       
               &&  (this.imgId == target.imgId )       
               &&  (this.usrId == target.usrId )       
               &&  (this.message == target.message )       
               &&  (this.postDate == target.postDate )       
               ;
    
        }
    
    
    	public static bool operator ==(Comments  objA, Comments  objB)
        {
            // Check if the objets are the same Comments entity
            if(Object.ReferenceEquals(objA, objB))
                return true;
      
            return objA.Equals(objB);
    }
    
    
    	public static bool operator !=(Comments  objA, Comments  objB)
        {
            return !(objA == objB);
        }
    
    
        /// <summary>
        /// Returns a <see cref="T:System.String"></see> that represents the 
        /// current <see cref="T:System.Object"></see>.
        /// </summary>
        /// <returns>
        /// A <see cref="T:System.String"></see> that represents the current 
        /// <see cref="T:System.Object"></see>.
        /// </returns>
    	public override String ToString()
    	{
    	    StringBuilder strComments = new StringBuilder();
    
    		strComments.Append("[ ");
           strComments.Append(" comId = " + comId + " | " );       
           strComments.Append(" imgId = " + imgId + " | " );       
           strComments.Append(" usrId = " + usrId + " | " );       
           strComments.Append(" message = " + message + " | " );       
           strComments.Append(" postDate = " + postDate + " | " );       
            strComments.Append("] ");    
    
    		return strComments.ToString();
        }
    
    
    }
}
