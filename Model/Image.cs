//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Es.Udc.DotNet.PracticaMaD.Model
{
    using System;
    using System.Text;
    using System.Collections.Generic;
    
    public partial class Image
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Image()
        {
            this.Comments = new HashSet<Comments>();
            this.Tag = new HashSet<Tag>();
            this.LikedBy = new HashSet<UserProfile>();
        }
    
        public long imgId { get; set; }
        public long usrId { get; set; }
        public string pathImg { get; set; }
        public string title { get; set; }
        public string description { get; set; }
        public System.DateTime dateImg { get; set; }
        public long catId { get; set; }
        public string f { get; set; }
        public string t { get; set; }
        public string ISO { get; set; }
        public string wb { get; set; }
        public long likes { get; set; }

        /// <summary>
        /// Relationship Name (Foreign Key in ER-Model): 
        /// FK_User_Cat
        /// </summary>
        public virtual Category Category { get; set; }
        /// [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        /// <summary>
        /// Relationship Name (Foreign Key in ER-Model): 
        /// FK_Image_Comm
        /// </summary>
        public virtual ICollection<Comments> Comments { get; set; }
        /// <summary>
        /// Relationship Name (Foreign Key in ER-Model): 
        /// FK_User_Img
        /// </summary>
        public virtual UserProfile UserProfile { get; set; }
        /// System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        /// <summary>
        /// Relationship Name (Foreign Key in ER-Model): 
        /// Image_Tag
        /// </summary>
        public virtual ICollection<Tag> Tag { get; set; }
        /// [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        /// <summary>
        /// Relationship Name (Foreign Key in ER-Model): 
        /// Likes
        /// </summary>
        public virtual ICollection<UserProfile> LikedBy { get; set; }
    
    	/// <summary>
    	/// A hash code for this instance, suitable for use in hashing algorithms and data structures 
    	/// like a hash table. It uses the Josh Bloch implementation from "Effective Java"
        /// Primary key of entity is not included in the hash calculation to avoid errors
    	/// with Entity Framework creation of key values.
    	/// </summary>
    	/// <returns>
    	/// Returns a hash code for this instance.
    	/// </returns>
    	public override int GetHashCode()
    	{
    	    unchecked
    	    {
    			int multiplier = 31;
    			int hash = GetType().GetHashCode();
    
    			hash = hash * multiplier + usrId.GetHashCode();
    			hash = hash * multiplier + (pathImg == null ? 0 : pathImg.GetHashCode());
    			hash = hash * multiplier + (title == null ? 0 : title.GetHashCode());
    			hash = hash * multiplier + (description == null ? 0 : description.GetHashCode());
    			hash = hash * multiplier + dateImg.GetHashCode();
    			hash = hash * multiplier + catId.GetHashCode();
    			hash = hash * multiplier + (f == null ? 0 : f.GetHashCode());
    			hash = hash * multiplier + (t == null ? 0 : t.GetHashCode());
    			hash = hash * multiplier + (ISO == null ? 0 : ISO.GetHashCode());
    			hash = hash * multiplier + (wb == null ? 0 : wb.GetHashCode());
    			hash = hash * multiplier + likes.GetHashCode();
    
    			return hash;
    	    }
    
    	}
        
        /// <summary>
        /// Compare this object against another instance using a value approach (field-by-field) 
        /// </summary>
        /// <remarks>See http://www.loganfranken.com/blog/687/overriding-equals-in-c-part-1/ for detailed info </remarks>
    	public override bool Equals(object obj)
    	{
    
            if (ReferenceEquals(null, obj)) return false;        // Is Null?
            if (ReferenceEquals(this, obj)) return true;         // Is same object?
            if (obj.GetType() != this.GetType()) return false;   // Is same type? 
    
            Image target = obj as Image;
    
    		return true
               &&  (this.imgId == target.imgId )       
               &&  (this.usrId == target.usrId )       
               &&  (this.pathImg == target.pathImg )       
               &&  (this.title == target.title )       
               &&  (this.description == target.description )       
               &&  (this.dateImg == target.dateImg )       
               &&  (this.catId == target.catId )       
               &&  (this.f == target.f )       
               &&  (this.t == target.t )       
               &&  (this.ISO == target.ISO )       
               &&  (this.wb == target.wb )       
               &&  (this.likes == target.likes )       
               ;
    
        }
    
    
    	public static bool operator ==(Image  objA, Image  objB)
        {
            // Check if the objets are the same Image entity
            if(Object.ReferenceEquals(objA, objB))
                return true;
      
            return objA.Equals(objB);
    }
    
    
    	public static bool operator !=(Image  objA, Image  objB)
        {
            return !(objA == objB);
        }
    
    
        /// <summary>
        /// Returns a <see cref="T:System.String"></see> that represents the 
        /// current <see cref="T:System.Object"></see>.
        /// </summary>
        /// <returns>
        /// A <see cref="T:System.String"></see> that represents the current 
        /// <see cref="T:System.Object"></see>.
        /// </returns>
    	public override String ToString()
    	{
    	    StringBuilder strImage = new StringBuilder();
    
    		strImage.Append("[ ");
           strImage.Append(" imgId = " + imgId + " | " );       
           strImage.Append(" usrId = " + usrId + " | " );       
           strImage.Append(" pathImg = " + pathImg + " | " );       
           strImage.Append(" title = " + title + " | " );       
           strImage.Append(" description = " + description + " | " );       
           strImage.Append(" dateImg = " + dateImg + " | " );       
           strImage.Append(" catId = " + catId + " | " );       
           strImage.Append(" f = " + f + " | " );       
           strImage.Append(" t = " + t + " | " );       
           strImage.Append(" ISO = " + ISO + " | " );       
           strImage.Append(" wb = " + wb + " | " );       
           strImage.Append(" likes = " + likes + " | " );       
            strImage.Append("] ");    
    
    		return strImage.ToString();
        }
    
    
    }
}
